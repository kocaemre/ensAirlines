{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/YourContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract YourContract is Ownable {\n\n    uint256 public id;\n\n    struct Ticket {\n        string flightCode;\n        uint256 id;\n        string from;\n        string to;\n        string date;\n        uint256 price;\n        uint256 seat;\n        uint256 availableSeats;\n        bool[] seats;\n        mapping(address => bool) isCheckIn;\n\t\tmapping(address => bool) isItSold;\n\t\tmapping(address => uint256) ownerSeat;\n    }\n\n    Ticket[] public tickets;\n\n\tevent buyTicketEvent(string _flightCode,uint256 _ticketId , string _from, string _to, string _date, uint256 _price, uint256 _seat, address _user, uint256 _luggageWeight);\n\tevent checkInEvent(string _flightCode,uint256 _ticketId , string _from, string _to, string _date, uint256 _price, uint256 _seatNumber, address _user, uint256 _luggageWeight);\n    event createTicketEvent(string _flightCode,uint256 _ticketId , string _from, string _to, string _date, uint256 _price, uint256 _seat);\n    \n\n    \n\n    function createTicket( //koltuk sayısı az olacak\n        string memory _flightCode,\n        string memory _from,\n        string memory _to,\n        string memory _date,\n        uint256 _price,\n        uint256 _seat\n    ) public onlyOwner {\n        uint256 _availableSeats = _seat;\n\n        bool[] memory _array = new bool[](_seat);\n\n       \n        tickets.push();\n\n        Ticket storage newTicket = tickets[tickets.length - 1];\n        newTicket.flightCode = _flightCode;\n        id = tickets.length-1;\n        newTicket.id = id;\n        newTicket.from = _from;\n        newTicket.to = _to;\n        newTicket.date = _date;\n        newTicket.price = _price;\n        newTicket.seat = _seat;\n        newTicket.availableSeats = _availableSeats;\n        newTicket.seats = _array;\n\n        emit createTicketEvent(_flightCode, id, _from, _to, _date, _price, _seat);\n        \n\n        \n    }\n\n\tfunction getSeatMap(uint256 _ticketId) public view returns (bool[] memory) {\n\t\treturn tickets[_ticketId].seats;\n\t}\n\n\tfunction isCheckedIn(uint256 _ticketId, address _user) public view returns (bool) {\n\t\treturn tickets[_ticketId].isCheckIn[_user];\n\t}\n\n\n\tfunction buyTicket(uint256 _ticketId) public payable {\n\t\trequire(tickets[_ticketId].availableSeats > 0, \"No available seats\");\n\t\trequire(msg.value >= tickets[_ticketId].price, \"Insufficient funds\");\n\t\trequire(!tickets[_ticketId].isItSold[msg.sender], \"Already bought a ticket\");\n        uint256 luggageWeight = 10;\n\n        if(msg.value >= tickets[_ticketId].price/100*110){\n            luggageWeight = 20;}\n\n\t\ttickets[_ticketId].availableSeats--;\n\t\ttickets[_ticketId].isItSold[msg.sender] = true;\n\n        emit buyTicketEvent(tickets[_ticketId].flightCode, tickets[_ticketId].id, tickets[_ticketId].from, tickets[_ticketId].to, tickets[_ticketId].date, tickets[_ticketId].price, tickets[_ticketId].seat, msg.sender, luggageWeight);\n\t\t\n\t}\n\n\tfunction checkIn(uint256 _ticketId, uint256 _seat) public {\n\t\trequire(tickets[_ticketId].isItSold[msg.sender], \"You have not bought a ticket\");\n\t\trequire(!tickets[_ticketId].isCheckIn[msg.sender], \"You have already checked in\");\n\t\trequire(!tickets[_ticketId].seats[_seat], \"Seat is not available\");\n\n\n\t\ttickets[_ticketId].seats[_seat] = true;\n\t\ttickets[_ticketId].isCheckIn[msg.sender] = true;\n\t\ttickets[_ticketId].ownerSeat[msg.sender] = _seat;\n\n        emit checkInEvent(tickets[_ticketId].flightCode, tickets[_ticketId].id, tickets[_ticketId].from, tickets[_ticketId].to, tickets[_ticketId].date, tickets[_ticketId].price, _seat, msg.sender, 12);\n\t\t\n\t}\n\n    function withdraw() public onlyOwner{\n        // Call returns a boolean value indicating success or failure.\n        // This is the current recommended method to use.\n        (bool sent, ) = address(msg.sender).call{value: address(this).balance }(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n\n\t\n\n\n\n\n\n\t\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}